//....................... ॐ नमः शिवाय.......................  //
#include<bits/stdc++.h>
#include<iostream>
#include<set>
#include<map>
#include<iterator>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

///Defines.....
#define ll              long long
#define pb              push_back
#define RIP(i,n)        for(int i=0; i<n; i++)
#define PI              acos(-1)
#define nl              '\n'


using namespace std;


///Constants........
const int mod = 1e9+7;

///Functions..........
int bigmod(int a, int p, int M)
{
    p %= (M-1);
    int result = 1LL;
    while(p>0){
        if((p&1)) result = (result *1ll* a) % M;
        a = (a *1ll* a) % M;
        p>>=1;

    }
    return result;
}



            /********************************* Let's Start *********************************/
int n;
vector<int> a,take,notTake;
/*
    When the time complexity is around 1e8,
    we should avoid recursive DP and use iterative DP instead.
*/

void solve() {
    cin >> n;
    a.resize(n+1);
    take.resize(n+1);
    notTake.resize(n+1);

    int p;
    for(int i = 1; i <= n; i++) {
        cin >> a[i];
    }
    int inverseMod = bigmod(10000,(mod-2),mod);
    for(int i = 1; i <= n; i++) {
            cin >> p;
            take[i] = (p *1ll* inverseMod)%mod;
            notTake[i] = ((10000 - p)*1ll* inverseMod)%mod;
    }
    int ans = 0;
    vector<int> dp(1024);
    dp[0] = 1;
    for(int i = 1; i <= n; i++) {
        vector<int> ndp(1024);
        for(int j = 0; j <= 1023; j++) {
            ndp[j] = ((dp[j]*1ll*notTake[i])%mod + (dp[j^a[i]]*1ll*take[i])%mod)%mod;
        }
        swap(dp,ndp);
    }

    for(int i = 1; i <= 1023; i++) {
        ans = (ans + (i*i*1ll*dp[i]%mod))%mod;
    }
    cout << ans << nl;
}



int32_t main() {
    ios_base::sync_with_stdio(0), cin.tie(0);
    int t = 1;

    cin >> t;

    while(t--) {
        solve();
    }
}
